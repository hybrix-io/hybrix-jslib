image: registry.gitlab.com/hybrix/hybrixd/base-images/build-image:stable

variables:
  GIT_STRATEGY: none

stages:
 - build-interface
 - build-hybrixd
 - test
 - release
 - publish

interface:
  cache: {}
  stage: build-interface
  script:
    # Because of race conditions with merge squashes leaving broken references we circumvent the default git strategy GIT_STRATEGY: none
    - cd ..
    - "git clone -n https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/hybrix/hybrixd/interface.git --depth 10 --single-branch --branch $CI_COMMIT_REF_NAME"
    - cd interface
    - if git log | grep $CI_COMMIT_SHA; then
    -   echo "Commit $CI_COMMIT_SHA exists, retrieving it."
    -   "git -c advice.detachedHead=false checkout $CI_COMMIT_SHA"
    - else
    -   echo "Commit $CI_COMMIT_SHA does not exist, retrieving latest in branch $CI_COMMIT_REF_NAME"
    -   "git checkout"
    - fi
    - "git clone -n https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/hybrix/hybrixd/common.git --depth 10 --single-branch --branch master"
    - cd common
    - "git checkout"
    - cd ..

    # compile in release mode (uglified and minified)
    - ./scripts/npm/compile.sh
    # For debug use - ./scripts/npm/compile.sh debug

    - cp ./package.json ./dist/
    - cp ./scripts/pipeline/dist.sh ./dist/

    # TODO create clean up script
    # extract dist
    - shopt -s extglob
    - rm -rf !(dist) || true
    - mv ./dist/* ./
    - rm -rf ./dist || true
    # remove .git directory and .* files
    - rm -rf ./.git* || true

    # create a .version file
    - timestamp=$(date -u '+%Y-%m-%dT%H:%M:%S+00:00')
    - mode=release
    - echo "{\"${CI_PROJECT_PATH_SLUG}\":{\"mode\":\"${mode}\", \"project_path\":\"${CI_PROJECT_PATH}\", \"commit_ref_name\":\"${CI_COMMIT_REF_NAME}\", \"commit_ref_slug\":\"${CI_COMMIT_REF_SLUG}\", \"commit_sha\":\"${CI_COMMIT_SHA}\", \"pipeline_url\":\"${CI_PIPELINE_URL}\", \"packaged\":\"${timestamp}\"}}" > .version

  artifacts:
    paths:
    - ./*


hybrixd:
  cache: {}
  stage: build-hybrixd
  script:

    # download [hybrixd] artifact
    - PROJECT_REF_SLUG=hybrix%2Fhybrixd%2Fnode
    - PROJECT_REF_PATH=hybrix/hybrixd/node
    - PROJECT_REF_NAME=hybrixd
    - PROJECT_REF_BRANCH=master
    - PROJECT_REF_ID=6980168

    #move files required for dist
    - mv ./dist.sh /tmp/dist.sh
    - mv ./package.json /tmp/package.json

    - "curl -s --location --header \"PRIVATE-TOKEN:$HYBRIX_BOT_GITLAB_PIPELINE_TOKEN\" \"https://gitlab.com/api/v4/projects/${PROJECT_REF_ID}/jobs/artifacts/master/download?job=hybrixd\" -o artifacts-${PROJECT_REF_NAME}.zip"
    - unzip -qq -o artifacts-hybrixd.zip  -d ./

    # remove the zip-file (|| true --> on error, no problem)
    - rm -rf  artifacts-hybrixd.zip || true

    # remove .git files from artifact
    - rm -rf ./.git* || true

    # Move interface files to their position in the hybrixd node
    - mv ./hybrix-lib.nodejs.js interface/hybrix-lib.nodejs.js
    - mv ./hybrix-lib.web.js interface/hybrix-lib.web.js
    - mv test.js interface/test.js

    - mv /tmp/dist.sh ./scripts/npm/dist.sh
    - mv /tmp/package.json ./package.json

    # concatenate all .version files in the package
    - "find . -name \".version\" -print | xargs cat | tr '\n' ' ' | sed 's:} {:,:g' > versions.json"
    - "rm -rf .version"

    # prettify json in .versions
    - echo "const fs = require('fs'); const obj = JSON.parse(fs.readFileSync('versions.json', 'utf8')); fs.writeFileSync('versions.json', JSON.stringify(obj, null, 4));" > prettify.js
    - node prettify.js && rm prettify.js

  except:
    refs:
      - tags
  only:
    variables:
      - $TEST_ENABLED
  artifacts:
    paths:
    - ./*

test:
  stage: test
  script:
    - sh ./scripts/pipeline/test.sh
  coverage: /SUCCESS RATE[^|]*\:[^|]*\s+([\d\.]+)/
  dependencies:
    - hybrixd
  artifacts:
    reports:
      junit: test*.xml
  only:
    variables:
      - $TEST_ENABLED
  except:
   refs:
     - tags

dist:
  stage: release
  script:
    - sh ./dist.sh
  only:
    refs:
      - tags
  artifacts:
    paths:
      - ./dist

publish:
  cache: {}
  dependencies:
    - interface
    - dist
  stage: publish
  script:
    - shopt -s extglob
    # TODO create clean up script
    - rm -rf !(package.json|README.md|hybrix-lib.nodejs.js|hybrix-lib.web.js) || true
    - rm -rf .[^.] .??*
    #TODO create publish script
    - publish
  only:
    refs:
      - tags


# ---------------------------------------------------------------------------

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions

  function publish () {
    # Get correct version from repository tag
    VERSION=${CI_COMMIT_REF_NAME/-release/}
    VERSION_NUMBER="${VERSION//v}"

    echo "[.] Modify version in package.json"
    sed -i -e "s/.*version.*/\"version\": \"$VERSION_NUMBER\",/" package.json

    echo "[.] Install npm-cli-login (FIXME: should not be needed)"
    #TODO implement without npm-cli-login use .npmrc instead
    npm install npm-cli-login --save-dev

    echo "[.] Login to npm"
    node ./node_modules/npm-cli-login/bin/npm-cli-login.js -u "$NPM_USER" -p "$NPM_PASSWORD" -e "$NPM_MAIL" -r "https://registry.npmjs.org"

    echo "[.] Publish on npm"
    npm publish

    echo "[.] Modify package.json for github"
    sed -i -e 's+"name": "+"name": "@hybrix-io/+g' package.json

    echo "//npm.pkg.github.com/:_authToken=$GITHUB_RECIPE_EDITOR_TOKEN" > .npmrc
    echo "@hybrix-io:registry=https://npm.pkg.github.com" >> .npmrc

    echo "[.] Publish to github packages"
    npm publish
    rm .npmrc
  }

before_script:
  - *auto_devops

module.exports = (function (e) { var s = {}; function t (a) { if (s[a]) return s[a].exports; var n = s[a] = {i: a, l: !1, exports: {}}; return e[a].call(n.exports, n, n.exports, t), n.l = !0, n.exports; } return t.m = e, t.c = s, t.d = function (e, s, a) { t.o(e, s) || Object.defineProperty(e, s, {enumerable: !0, get: a}); }, t.r = function (e) { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {value: 'Module'}), Object.defineProperty(e, '__esModule', {value: !0}); }, t.t = function (e, s) { if (1 & s && (e = t(e)), 8 & s) return e; if (4 & s && typeof e === 'object' && e && e.__esModule) return e; var a = Object.create(null); if (t.r(a), Object.defineProperty(a, 'default', {enumerable: !0, value: e}), 2 & s && typeof e !== 'string') for (var n in e)t.d(a, n, function (s) { return e[s]; }.bind(null, n)); return a; }, t.n = function (e) { var s = e && e.__esModule ? function () { return e.default; } : function () { return e; }; return t.d(s, 'a', s), s; }, t.o = function (e, s) { return Object.prototype.hasOwnProperty.call(e, s); }, t.p = '', t(t.s = 0); }([function (e, s, t) { const a = t(1).knownIssues; const n = t(2); const i = 1e-5; const o = ['bch', 'dummy', 'eth', 'flo', 'ark', 'btc', 'burst', 'dash', 'dgb', 'etc', 'exp', 'lsk', 'ltc', 'nxt', 'omni', 'rise', 'shift', 'ubq', 'waves', 'xcp', 'xem', 'xrp', 'zec', 'mock.btc', 'eth.xhy', 'waves.xhy', 'nxt.xhy', 'omni.xhy', 'xcp.xhy', 'xem.xhy']; const r = e => ({test: {data: e.test, step: 'id'}, sample: {data: e.sample, step: 'id'}, details: {data: e.details, step: 'id'}, sampleValid: {data: e.sampleValid, step: 'id'}, sampleBalance: {data: e.sampleBalance, step: 'id'}, sampleUnspent: {data: e.sampleUnspent, step: 'id'}, sampleHistory: {data: e.sampleHistory, step: 'id'}, sampleTransaction: {data: e.sampleTransaction, step: 'id'}, seedValid: {data: e.seedValid, step: 'id'}, seedBalance: {data: e.seedBalance, step: 'id'}, seedUnspent: {data: e.seedUnspent, step: 'id'}, seedSign: {data: e.seedSign, step: 'id'}, seedSignHash: {data: {data: e.seedSign}, step: 'hash'}}); const d = Object.keys(r({})); function l (e) { return {data: [{symbol: e}, 'addAsset', {sample: {data: {query: '/asset/' + e + '/sample'}, step: 'rout'}, test: {data: {query: '/asset/' + e + '/test'}, step: 'rout'}, details: {data: {query: '/asset/' + e + '/details'}, step: 'rout'}, address: {data: {symbol: e}, step: 'getAddress'}, publicKey: {data: {symbol: e}, step: 'getPublicKey'}}, 'parallel', s => (void 0 === s.sample && (s.sample = {}), void 0 === s.details && (s.details = {}), void 0 === s.test && (s.test = {}), {sample: {data: s.sample, step: 'id'}, test: {data: s.test, step: 'id'}, details: {data: s.details, step: 'id'}, address: {data: s.address, step: 'id'}, sampleValid: {data: {query: '/asset/' + e + '/validate/' + s.sample.address}, step: 'rout'}, sampleBalance: {data: {query: '/asset/' + e + '/balance/' + s.sample.address}, step: 'rout'}, sampleUnspent: {data: {query: '/asset/' + e + '/unspent/' + s.sample.address + '/' + (Number(i) + Number(s.details.fee)) + '/' + s.address + '/' + s.sample.publicKey}, step: 'rout'}, sampleHistory: {data: {query: '/asset/' + e + '/history/' + s.sample.address}, step: 'rout'}, sampleTransaction: {data: {query: '/asset/' + e + '/transaction/' + s.sample.transaction}, step: 'rout'}, seedValid: {data: {query: '/asset/' + e + '/validate/' + s.address}, step: 'rout'}, seedBalance: {data: {query: '/asset/' + e + '/balance/' + s.address}, step: 'rout'}, seedUnspent: {data: {query: '/asset/' + e + '/unspent/' + s.address + '/' + (Number(i) + Number(s.details.fee)) + '/' + s.sample.address + '/' + s.publicKey}, step: 'rout'}}), 'parallel', s => ({test: {data: s.test, step: 'id'}, sample: {data: s.sample, step: 'id'}, details: {data: s.details, step: 'id'}, sampleValid: {data: s.sampleValid + ' ' + s.sample.address, step: 'id'}, sampleBalance: {data: s.sampleBalance, step: 'id'}, sampleUnspent: {data: s.sampleUnspent, step: 'id'}, sampleHistory: {data: s.sampleHistory, step: 'id'}, sampleTransaction: {data: s.sampleTransaction, step: 'id'}, seedValid: {data: s.seedValid + ' ' + s.address, step: 'id'}, seedBalance: {data: s.seedBalance, step: 'id'}, seedUnspent: {data: s.seedUnspent, step: 'id'}, seedSign: {data: {symbol: e, amount: i, target: s.sample.address, validate: !1, unspent: s.test.hasOwnProperty('unspent') ? s.test.unspent : s.seedUnspent, time: s.test.time}, step: 'rawTransaction'}}), 'parallel', r, 'parallel'], step: 'sequential'}; } const p = e => s => { const t = {}; let i = 0; let o = 0; for (let r in s) if (t[r] = {}, e.includes(r)) { const e = s[r].details; const d = s[r].test; for (let l in s[r]) { const p = s[r][l]; if (n.hasOwnProperty(l)) { const i = n[l](s[r][l], e, d); let m; i || (++o, m = a[r + '_' + l]), t[r][l] = {valid: i, known: m, result: p, messages: ['TODO']}; } else { const e = a[r + '_' + l]; t[r][l] = {valid: !1, known: e, result: p, messages: ['No validation available']}, ++o; }++i; } } else for (let e of d) { const s = a[r + '_' + e]; t[r][e] = {valid: !1, known: s, result: null, messages: ['Asset not available']}, ++i, ++o; } const r = {assets: {}, total: i, failures: o}; return Object.keys(t).sort().forEach(e => { r.assets[e] = t[e]; }), r; }; s.runTests = function (e, s, t, a, n) { const i = {}; e = e && e !== '*' ? e.split(',') : o; for (let s of e)i[s] = l(s); s.sequential(['init', {username: 'POMEW4B5XACN3ZCX', password: 'TVZS7LODA5CSGP6U'}, 'session', {host: t}, 'addHost', i, 'parallel', p(e)], a, e => { console.error(e); }, n); }; }, function (e, s) { s.knownIssues = {bch_seedSign: {message: 'Not yet functioning. Perhaps funds missing for test', link: ''}, bch_seedSignHash: {message: 'Not yet functioning. Perhaps funds missing for test', link: ''}, btc_seedSignHash: {message: 'Signing still holds a dynamic componement', link: ''}, burst_seedUnspent: {message: 'Not yet functioning. Perhaps funds missing for test', link: ''}, burst_seedSign: {message: 'Not yet functioning. Perhaps funds missing for test', link: ''}, burst_seedSignHash: {message: 'Not yet functioning. Perhaps funds missing for test / Signing still holds a dynamic componement', link: ''}, dash_seedSign: {message: 'Unstable host. Should work', link: ''}, dash_seedSignHash: {message: 'Unstable host. Should work', link: ''}, dash_sampleHistory: {message: 'Unstable host. Should work', link: ''}, dgb_sampleHistory: {message: 'Not yet functioning', link: ''}, dgb_seedSign: {message: 'Not yet functioning. Perhaps funds missing for test', link: ''}, dgb_seedSignHash: {message: 'Not yet functioning. Perhaps funds missing for test', link: ''}, etc_sampleHistory: {message: 'Not yet functioning', link: 'https://gitlab.com/hybrix/hybrixd/node/issues/699'}, 'eth.xhy_sampleHistory': {message: 'Eth token history not yet supported', link: 'https://gitlab.com/hybrix/hybrixd/node/issues/701'}, exp_sampleHistory: {message: 'Not yet functioning', link: ''}, flo_seedSign: {message: 'Not yet functioning. Perhaps funds missing for test', link: ''}, flo_seedSignHash: {message: 'Not yet functioning. Perhaps funds missing for test', link: ''}, nxt_seedSignHash: {message: 'Signing still holds a dynamic componement', link: ''}, 'nxt.xhy_seedSignHash': {message: 'Signing still holds a dynamic componement', link: ''}, omni_seedSignHash: {message: 'Not yet functioning. Perhaps funds missing for test', link: ''}, 'omni.xhy_seedSignHash': {message: 'Not yet functioning. Perhaps funds missing for test', link: ''}, ubq_sampleHistory: {message: 'Not yet functioning', link: 'https://gitlab.com/hybrix/hybrixd/node/issues/697'}, rise_sampleTransaction: {message: 'Not yet functioning', link: 'https://gitlab.com/hybrix/hybrixd/node/issues/885'}, shift_sampleTransaction: {message: 'Not yet functioning', link: 'https://gitlab.com/hybrix/hybrixd/node/issues/885'}, xcp_seedSignHash: {message: 'Signing still holds a dynamic componement', link: ''}, 'xcp.xhy_seedSignHash': {message: 'Signing still holds a dynamic componement', link: ''}, xcp_sampleTransaction: {message: 'Missing data for source,dest,amount, fee', link: 'https://gitlab.com/hybrix/hybrixd/node/issues/705'}, 'xcp.xhy_sampleTransaction': {message: 'Missing data for source,dest,amount, fee', link: 'https://gitlab.com/hybrix/hybrixd/node/issues/705'}, xrp_seedSignHash: {message: 'Signing still holds a dynamic componement', link: ''}, zec_seedSign: {message: 'Not yet functioning. Perhaps funds missing for test', link: ''}, zec_seedSignHash: {message: 'Not yet functioning. Perhaps funds missing for test', link: ''}, zec_sampleHistory: {message: 'Unstable', link: 'https://gitlab.com/hybrix/hybrixd/node/issues/702'}}; }, function (e, s) { function t (e) { return typeof e === 'string' && e.startsWith('valid'); } function a (e, s, t) { if (s.hasOwnProperty('factor')) { const t = s.factor; return typeof e === 'string' && e.toString().indexOf('.') !== -1 && e.split('.')[1].length === Number(t); } return !1; } function n (e) { return void 0 !== e && e !== null; }s.test = function (e) { return typeof e === 'object' && e !== null; }, s.sample = function (e) { return typeof e === 'object' && e !== null && e.hasOwnProperty('address') && e.hasOwnProperty('transaction'); }, s.details = function (e) { return typeof e === 'object' && e !== null && e.hasOwnProperty('symbol') && e.hasOwnProperty('name') && e.hasOwnProperty('fee') && typeof e.hasOwnProperty('fee') && e.hasOwnProperty('factor') && e.hasOwnProperty('contract') && e.hasOwnProperty('mode') && e.hasOwnProperty('keygen-base'); }, s.sampleValid = t, s.sampleBalance = a, s.sampleUnspent = n, s.sampleHistory = function (e) { return typeof e === 'object' && e !== null; }, s.sampleTransaction = function (e) { return typeof e === 'object' && e !== null && e.hasOwnProperty('id') && e.hasOwnProperty('timestamp') && e.hasOwnProperty('amount') && e.hasOwnProperty('symbol') && e.hasOwnProperty('fee') && e.hasOwnProperty('source') && e.hasOwnProperty('target') && e.hasOwnProperty('confirmed'); }, s.seedValid = t, s.seedBalance = a, s.seedUnspent = n, s.seedSign = function (e) { return typeof e === 'string'; }, s.seedSignHash = function (e, s, t) { if (t.hasOwnProperty('hash')) { const s = t.hash; return e === s || s === 'dynamic' && e !== '00000000'; } return !1; }; }]));
